{
    "app": {
        "name": "Smart NFTs"
    },
    "aria": {
        "anchorLinks": "Link to {0}",
        "imageUploadRemove": "Remove the selected image",
        "copyContract": "Copy this contract",
        "exploreTransactionHash": "See this transaction hash in Etherscan",
        "removeEntry": "Remove this metadata field"
    },
    "placeholders": {
        "contractId": "Contract ID..."
    },
    "labels": {
        "contractId": "Contract ID"
    },
    "footer": {
        "made": "Made by",
        "madeContinued": "This is a capstone project for our Software Engineering degrees. The goal is to make NFT creation easy and accessible to everyone, centralizing all the necessary technology through a friendly UI.",
        "location": {
            "text": "Proyecto Final - Instituto Tecnológico de Buenos Aires (ITBA)",
            "aria": "Learn more about the Instituto Tecnológico de Buenos Aires (ITBA)"
        },
        "contact": {
            "aria": "Contact {0} via email"
        },
        "status": {
            "text": "Service Status",
            "aria": "View the service status"
        },
        "learnMore": {
            "aria": "Learn more about {0}"
        },
        "app": {
            "aria": "Go to the homepage"
        },
        "copyright": "© 2022 Smart NFTs"
    },
    "home": {
        "title": "Home",
        "meta": {
            "title": "Homepage",
            "description": "Smart NFTs, create, deploy, test, and view a custom NFT contract in just minutes. Mint tokens and share them with the world. A project by Florencia Petrikovich and Gonzalo Hirsch."
        },
        "hero": {
            "title": "Create, deploy, and interact with your <strong>custom NFT</strong> contract in just <strong>minutes</strong>",
            "button": {
                "text": "Start Now",
                "aria": "Start using Smart NFTs now"
            },
            "learnMore": {
                "text": "Learn More",
                "aria": "Learn more about the possible options you have"
            }
        },
        "tabs": {
            "title": "Our Features",
            "buttons": {
                "create": {
                    "text": "Go Create",
                    "aria": "Create a new contract"
                },
                "edit": {
                    "text": "Go Edit",
                    "aria": "Edit an existing contract"
                },
                "interact": {
                    "text": "Go Interact",
                    "aria": "Interact with a deployed contract"
                },
                "view": {
                    "text": "View Listing",
                    "aria": "View contract tokens"
                }
            },
            "content": {
                "create": {
                    "text": "Use our simple editor to create your custom NFT in just seconds! Choose among multiple extensions and define your metadata according to industry standards in just a few clicks. Create, deploy, and verify your very own custom ERC-721 contract. Don't know how to code? Don't worry! For starters, this is a zero-code environment, and everything has explanations. Don't want to deploy it with us? We've got you covered. Create the contract and download it for further customizations or deployment."
                },
                "edit": {
                    "text": "Already have an existing contract you created with us? Use this option to continue working on it. Our contracts can be edited, deployed, and verified an infinite number of times. Be mindful that any change done on the contract, excluding the metadata fields, after deployment will require the contract to be deployed again. To start, enter your contract's id below and click Go Edit."
                },
                "interact": {
                    "text": "After deploying your contract to the blockchain, you can interact with it. Enter your contract's ID and begin minting tokens, reading contract data and writing to the contract itself. Everything is in real-time and without costly gas fees. Interaction will be done through SmartNFTs' wallet, meaning this wallet will be the contract owner. You can transfer ownership of the contract to yourself at any time to make it your own."
                },
                "view": {
                    "text": "After minting NFTs, you can view them by entering your contract's ID and clicking 'Go View'. You will be able to view the token's relevant information and it's metadata, which can include the image, name, description, and attributes you defined. We will provide a variety of links for you to view your raw metadata as JSON and to view your tokens through popular sites, such as OpenSea and Etherscan. You can use these sites to share your tokens with the world!"
                }
            }
        },
        "facts": {
            "wallet": {
                "title": "No Wallet",
                "description": "No setup is needed to create or interact with the contracts!"
            },
            "gas": {
                "title": "No Gas Fees",
                "description": "No Ethereum or upfront fees are required to use this application!"
            },
            "coding": {
                "title": "No Coding",
                "description": "Zero coding is required to create the contract or mint NFTs!"
            }
        },
        "verticalFacts": {
            "step": {
                "title": "Step by step explanations",
                "description": "Each option has an in depth explanations, helping you understand what functionality each extension will bring to the contract if added."
            },
            "simple": {
                "title": "Simple and Quick",
                "description": "In less than 5 minutes, you can have your custom ERC-721 smart contract deployed, verified, and ready to start minting tokens with custom metadata."
            },
            "centralized": {
                "title": "All in One",
                "description": "You can find everything you might need here! Creation, compilation, verification, adding metadata, contract interaction, and your own NFT gallery."
            }
        },
        "cta": {
            "title": "See more about this project",
            "text": "Learn about ERC-721 Smart Contracts, explore how this works, the technologies and services behind it, and check the service status.",
            "buttons": {
                "status": {
                    "text": "Status",
                    "aria": "Start using Smart NFTs now"
                },
                "howItWorks": {
                    "text": "How It Works",
                    "aria": "Start using Smart NFTs now"
                },
                "technologies": {
                    "text": "Technologies",
                    "aria": "Start using Smart NFTs now"
                },
                "erc721": {
                    "text": "ERC-721",
                    "aria": "Learn about ERC-721 contracts"
                }
            }
        }
    },
    "nav": {
        "create": {
            "text": "Create",
            "aria": "Go to create"
        },
        "interact": {
            "text": "Interact",
            "aria": "Go to interact"
        },
        "edit": {
            "text": "Edit",
            "aria": "Go to edit"
        },
        "list": {
            "text": "View",
            "aria": "Go to view"
        },
        "status": {
            "text": "Status",
            "aria": "See the service status"
        },
        "howItWorks": {
            "text": "How It Works",
            "aria": "Go to the how it works page"
        },
        "technologies": {
            "text": "Technologies",
            "aria": "See what technologies power this page"
        },
        "erc721": {
            "text": "ERC-721",
            "aria": "See what ERC-721 contracts are"
        },
        "app": {
            "aria": "Go to the homepage"
        },
        "menu": {
            "open": {
                "aria": "Open the menu"
            },
            "close": {
                "aria": "Close the menu"
            }
        },
        "features": "Features",
        "about": "About",
        "contact": "Contact"
    },
    "about": {
        "hero": {
            "title": "Behind the Scenes",
            "button": {
                "text": "Read More",
                "aria": "Learn more about SmartNFTs"
            },
            "subtitle": "Read on to learn what an ERC-721 Smart Contract is, what technologies are used in our processes, and the purpose for which SmartNFTs was created."
        },
        "erc721": {
            "title": "What is a ERC-721 Smart Contract?",
            "text": "After minting NFTs, you can view them by entering your contract's ID and clicking 'Go View'. You will be able to view the token's relevant information and it's metadata, which can include the image, name, description, and attributes you defined. We will provide a variety of links for you to view your raw metadata as JSON and to view your tokens through popular sites, such as OpenSea and Etherscan. You can use these sites to share your tokens with the world!"
        },
        "technologies": {
            "title": "Technologies",
            "facts": {
                "openzeppelin": {
                    "title": "Contract",
                    "description": "Contracts dynamically coded in Solidity, compiled using the Javascript bindings for the Solidity compiler and powered by OpenZepellin standard contracts."
                },
                "pinata": {
                    "title": "Storage",
                    "description": "Storage in the blockchain is expensive; we use Pinata instead for storage. An IPFS (InterPlanetary File System) is needed to store large amounts of data off-chain."
                },
                "infura": {
                    "title": "Connection",
                    "description": "Dedicated connections to the blockchain are hard to build, but Infura helps us have an entry point for interaction without having the infrastructure."
                }
            }
        },
        "howItWorks": {
            "title": "Illustrative Diagram",
            "process": {
                "A": {
                    "description": "The API connects to Infura’s Ethereum node. Using Web3.js, it interacts with said node."
                },
                "B": {
                    "description": "The API stores tokens’ metadata, including images and JSONs, in an IPFS named Pinata. Metadata is public and is visible to everyone."
                },
                "C": {
                    "description": "Communicate with the Ethereum blockchain through a node provided by Infura."
                }
            }
        },
        "meta": {
            "title": "About",
            "description": "Learn more about how Smart NFTs works and the technologies behind the product. Understand what an ERC-721 contract is before creating them."
        }
    },
    "editor": {
        "contract": {
            "empty": "Start by completing the contract name and symbol...",
            "id": "Your contract ID is:",
            "idCopy": "Copy your contract ID",
            "idFull": "Your contract ID is {0}",
            "idSimple": "Contract ID",
            "deployCopy": "Copy your deployed contract address",
            "deploy": "Your contract is deployed on address:",
            "deploySimple": "Deployed at",
            "verified": "Your contract is verified!",
            "view": "View on Etherscan",
            "interact": "Interact with this contract",
            "information": "Contract Information",
            "features": "Features",
            "creation": "Creation",
            "metadata": "Metadata",
            "hasImage": "Has image?",
            "reminder": "Send a contract ID reminder"
        },
        "error": {
            "nameUsed": "Name for property already in use"
        },
        "buttons": {
            "deploy": {
                "text": "Deploy",
                "aria": "Deploy the NFT contract"
            },
            "verify": {
                "text": "Verify",
                "aria": "Verify the NFT contract"
            },
            "expand": {
                "ariaExpand": "Expand for more information",
                "ariaContract": "See less information"
            },
            "download": "Download"
        },
        "deploy": {
            "title": "Deploy Contract",
            "loading": {
                "compile": "Compiling contract...",
                "deploy": "Deploying contract..."
            },
            "prepare": {
                "compile": "Contract compilation...",
                "deploy": "Contract deployment..."
            },
            "message": "Your contract is now deployed on address <strong class=\"break-all\">{0}</strong>. You will be able to see it in the blockchain (it may take a couple of minutes for the block to be mined). You can now verify it, but please wait until the contract is visible. If you edit the contract, you will have to deploy it again.",
            "error": "Error deploying contract. If the Smart NFTs' address is out of gas, please contact the owners of the site, otherwise the transaction hash will provide more information if used in Etherscan."
        },
        "verify": {
            "title": "Verify Contract",
            "loading": "Verifying contract, please wait...",
            "message": "Your contract is now verified. Be mindful, if you edit the contract you will have to deploy it and verify it again.",
            "error": "Error verifying contract. If the contract was deployed in the last 5 minutes, please verify the transaction is mined on Etherscan and try again."
        },
        "download": {
            "message": "Contract is downloaded!",
            "error": "Error downloading the contract, please try again later.",
            "aria": "Download this contract"
        },
        "copyCode": {
            "error": "Error downloading the contract, please try again later.",
            "aria": "Copy this contract"
        },
        "email": {
            "title": "Contract Reminder",
            "loading": "Sending email, please wait...",
            "message": "You should receive an email, it might take a couple of minutes. Check your spam folder just in case.",
            "inputMessage": "We'll send a reminder email with your contract ID. Be careful which email you choose, you can send reminders every 8hs.",
            "error": "Error sending email, you exceeded the allowed quota per contract. Quota is one email every 8 hours.",
            "button": "Send Email"
        },
        "metadata": {
            "image": "Image",
            "fields": "Properties",
            "note": "<strong>Note:</strong> By default, all tokens have name & description",
            "addAttribute": {
                "text": "Add Attribute",
                "aria": "Add another attribute to the schema"
            },
            "titles": {
                "name": "Name",
                "type": "Type",
                "display": "Display"
            }
        },
        "content": {
            "title": "Fields Explained",
            "contractInformation": {
                "title": "Contract Information",
                "copy": "Contract information mainly refers to the <pre class=\"code\"><code>name</code></pre> and <pre class=\"code\"><code>symbol</code></pre> properties of the Smart Contract. <pre class=\"code\"><code>name</code></pre> refers to the collection itself (e.g., the \"CustomTokens\" collection) and will be displayed on most external sites when referring to the Smart Contract. <pre class=\"code\"><code>symbol</code></pre> refers to a way to display the number of tokens in the set (e.g., the symbol for \"CustomTokens\" can be \"CTKN\" and that way, someone can have 3 CTKN)."
            },
            "creation": {
                "title": "Creation",
                "copy_1": "With each extension you choose, you add more functionality to your contract. Some extensions are variations of others, so when selecting some, we'll add others for you (e.g., choosing \"Auto Increment IDs\" activates \"Mintable\").",
                "copy_2": "Previewing the contract before and after adding an extension can help you understand the changes and how the Solidity code works.",
                "mintable": {
                    "title": "Mintable",
                    "copy_1": "The <pre class=\"code\"><code>mintable</code></pre> extension allows the owner of the contract to emit new NFTs. These tokens are simple, just a user-defined ID, and get automatically transferred to the specified address during creation. If you combine this extension with <pre class=\"code\"><code>URI Storage</code></pre>, the NFTs can have metadata, making them more valuable.",
                    "autoincrementIds": {
                        "title": "Auto Increment IDs",
                        "copy_1": "The <pre class=\"code\"><code>autoincrement IDs</code></pre> extension automatically assigns incrementing IDs to the tokens, removing the <pre class=\"code\"><code>tokenId</code></pre> parameter from the minting."
                    }
                },
                "pausable": {
                    "title": "Pausable",
                    "copy_1": "The <pre class=\"code\"><code>pausable</code></pre> extension authorizes the contract owner to pause (and unpause) token transfers, minting, and burning. Stopping the contract can be helpful if trades need to be prevented for evaluation or in an emergency scenario where there's a bug."
                },
                "burnable": {
                    "title": "Burnable",
                    "copy_1": "The <pre class=\"code\"><code>burnable</code></pre> extension allows the owner of a token to burn (destroy) it, which is irreversible. Burning tokens can reduce the supply of NFTs, possibly increasing the asset price, but that depends on the market."
                },
                "enumerable": {
                    "title": "Enumerable",
                    "copy_1": "The <pre class=\"code\"><code>enumerable</code></pre> extension helps add more features to the NFT contract. It allows the contract to publish its complete list of tokens and make them discoverable at the expense of more expensive transfers. It adds the following methods:",
                    "copy_2": {
                        "bullet_1": "<pre class=\"code\"><code>totalSupply()</code></pre>: Returns the total amount of tokens stored in the contract.",
                        "bullet_2": "<pre class=\"code\"><code>tokenByIndex()</code></pre>: Returns <pre class=\"code\"><code>tokenId</code></pre> of an NFT stored at the provided index.",
                        "bullet_3": "<pre class=\"code\"><code>tokenOfOwnerByIndex()</code></pre>: Returns the <pre class=\"code\"><code>tokenId</code></pre> of an NFT stored at a particular index of the owner's list of tokens."
                    },
                    "limitedSupply": {
                        "title": "Limited Supply",
                        "copy_1": "The <pre class=\"code\"><code>limited supply</code></pre> extension allows you to limit how many tokens the contract can mint. This extension can generate a more limited edition collection of NFTs. The <pre class=\"code\"><code>enumerable</code></pre> extension is needed to count the NFTs that exist."
                    }
                },
                "uriStorage": {
                    "title": "URI Storage",
                    "copy_1": "The <pre class=\"code\"><code>URI storage</code></pre> extension allows setting a URI pointing to off-chain storage for each NFT. This off-chain data, also known as <a href=\"#metadata\" class=\"link\">metadata</a>, can add many extra attributes to the tokens to make them richer. If selected, a URI pointing to the metadata is needed when minting a new NFT (although this won't be necessary when interacting via Smart NFTs).",
                    "uniqueStorage": {
                        "title": "Unique Storage",
                        "copy_1": "The <pre class=\"code\"><code>unique storage</code></pre> extension prevents token duplicated from being created. By duplicates, we mean tokens with the same metadata. Metadata gets hashed before minting the NFT to compare it and find copies. Note that it increases the cost of creating an NFT."
                    }
                }
            },
            "metadata": {
                "title": "Metadata",
                "copy_1": "Metadata refers to all other properties that one can add to the token. The <pre class=\"code\"><code>name</code></pre> and <pre class=\"code\"><code>description</code></pre> properties are always required, but any attribute can be added, including images and other files.",
                "copy_2": "Metadata is stored off-chain because it's expensive to keep it in the chain. That's where the <a class=\"link\" href=\"https://ipfs.io/\" target=\"_blank\" rel=\"noopener noreferer\">InterPlanetary File System</a> (IPFS) comes into play. IPFS is a protocol and a peer-to-peer network for storing and sharing information in a distributed filesystem, basically where we save our metadata. We only keep the link to the metadata in the blockchain, thus reducing the footprint of the contract. Given this, metadata is only allowed when activating the URI Storage extension, indicating the URIs will be stored. You can update the metadata schema after deploying the contract, and we'll still follow the latest schema you choose.",
                "copy_3": "Extra attributes can be of four types. \"<em>String</em>\" is just plain text (e.g., a color), while \"<em>Number</em>\" can come in 3 different formats. \"<em>Boost Number</em>\" is a number displayed as a booster (e.g., height). \"<em>Boost Percentage</em>\" is a percentage also shown as a booster (e.g., strength). \"<em>Plain Number</em>\" is just a number (e.g., generation).",
                "copy_4": "You can define the schema that each NFT's metadata will have. Metadata values are filled in when creating a token."
            },
            "deploy": {
                "title": "Deploy",
                "copy_1": "When you deploy your contract, you are publishing it to the world. Deployments happen in a testnet (a blockchain made for testing), specifically <a class=\"link\" href=\"https://www.rinkeby.io/#stats\" target=\"_blank\" rel=\"noopener noreferer\">Rinkeby</a> or <a class=\"link\" href=\"https://ropsten.etherscan.io/\" target=\"_blank\" rel=\"noopener noreferer\">Ropsten</a> in our case (it will almost always deploy to Rinkeby). Using the deployment address (how to find your smart contract in the blockchain), you can see more information on sites like <a class=\"link\" href=\"https://rinkeby.etherscan.io/\" target=\"_blank\" rel=\"noopener noreferer\">Etherscan</a>.",
                "copy_2": "All contracts deploy using the Smart NFTs address so that you can fully interact with it. If you want to, you can also transfer ownership to your address, but we won't be capable of interacting with it.",
                "copy_3": "Updating a deployed smart contract is hard, but we let you deploy multiple times. The only catch is that you'll lose the previous contract we stored. If you still want to access the previous version, we recommend transferring ownership of the old version before deploying a new one."
            },
            "verify": {
                "title": "Verify",
                "copy": "Verifying the contract is used for transparency; you match the compiled contract code with the code itself of the contract. It will allow everyone to see the code you uploaded and interact from sites like <a class=\"link\" href=\"https://rinkeby.etherscan.io/\" target=\"_blank\" rel=\"noopener noreferer\">Etherscan</a>. It's not required in our case to verify the contract before interacting with it, but we offer the option anyways."
            }
        },
        "prepare": "Preparing the editor, hang tight...",
        "lastSaved": "Last saved: {0}",
        "lastSavedSimple": "Last saved",
        "saving": "Saving...",
        "meta": {
            "title": "Contract Editor",
            "description": "Create or edit your smart contract, and define the metadata your NFT will have. Deploy, verify, and download the generated NFT Smart Contract."
        }
    },
    "showcase": {
        "title": "Tokens",
        "prepare": "Fetching tokens, please wait...",
        "preparePage": "Fetching more tokens, please wait...",
        "noTokens": "No tokens found",
        "buttons": {
            "edit": "Edit contract",
            "interact": "Interact with contract"
        },
        "floatingInfo": {
            "error": "The IPFS has returned some errors, you won't see all the information for your tokens. Click on the OpenSea or Etherscan links to see more about each token.",
            "info": "It might take a while for the tokens and their information to load, it depends on the IPFS service, not us."
        },
        "cards": {
            "noMetadata": "This token has no metadata, click on the icons below to explore it on third-party services or view the owner.",
            "expandCard": "View more details about this token",
            "image": {
                "aria": "Image for the {0} token"
            },
            "links": {
                "etherscan": {
                    "aria": "See this token on Etherscan",
                    "tooltip": "View this token on Etherscan"
                },
                "opensea": {
                    "aria": "See this token on OpenSea",
                    "tooltip": "View this token on OpenSea"
                },
                "owner": {
                    "aria": "See the token owner on Etherscan",
                    "tooltip": "View the token owner on Etherscan"
                },
                "metadata": {
                    "aria": "See the raw token metadata in Pinata",
                    "tooltip": "View the raw token metadata in Pinata"
                },
                "image": {
                    "aria": "See the raw token image in Pinata",
                    "tooltip": "View the raw token image in Pinata"
                }
            },
            "attributes": {
                "boosts": "Boosts",
                "stats": "Stats",
                "properties": "Properties"
            }
        },
        "meta": {
            "title": "Token Listing",
            "description": "View all the NFTs created with your contract. All tokens are visible in Etherscan and OpenSea also!"
        }
    },
    "interact": {
        "title": {
            "default": "Contract",
            "create": "Create Token"
        },
        "read": {
            "title": "Read"
        },
        "write": {
            "title": "Write"
        },
        "importantNote": {
            "title": "Important Note",
            "content": "If you execute the <pre class=\"code\"><code>transferOwnership</code></pre> or <pre class=\"code\"><code>renounceOwnership</code></pre> methods, you will be effectively removing us (the Smart NFTs team) as the owners of your contract, which means that multiple methods will stop working. Be mindful of this action, otherwise you will have to transfer ownership back to us or deploy a new version of this contract."
        },
        "methods": {
            "fields": {
                "title": "Fields",
                "copyAddress": "Autofill address",
                "metadata": {
                    "title": "Metadata",
                    "image": "Image",
                    "details": "Details"
                }
            },
            "result": {
                "title": "Result",
                "copyResponse": "Copy this response"
            }
        },
        "content": {
            "title": "Methods Explained",
            "general": {
                "methodTypes": {
                    "title": "Types of Methods",
                    "anchor": "method-types"
                },
                "read": {
                    "title": "Read Methods",
                    "anchor": "read-methods",
                    "text": "\"Read\" methods don't require gas fees, as they only read data from the blockchain and don't change it."
                },
                "write": {
                    "title": "Write Methods",
                    "anchor": "write-methods",
                    "text": "\"Write\" methods require a gas fee when executing them because changes to blockchain data happen. The price of gas changes constantly, so there are <a class=\"underline hover:text-brand_secondary duration-300\" href=\"https://etherscan.io/gastracker\" target=\"_blank\" rel=\"noopener noreferer\">tools</a> for tracking the price."
                }
            },
            "methods": {
                "safeMint": {
                    "content_1": "The <pre class=\"code\"><code>safeMint</code></pre> function safely mints tokens. It receives a <pre class=\"code\"><code>to</code></pre> address to send the newly created NFT and a <pre class=\"code\"><code>tokenId</code></pre>. The token ID is not necessary if autoincrement IDs are active.",
                    "content_2": "Before calling this method, if metadata is stored, the values for metadata properties need to be defined."
                },
                "balanceOf": {
                    "content_1": "Returns the number of tokens the <pre class=\"code\"><code>owner</code></pre> address holds."
                },
                "getApproved": {
                    "content_1": "Gets the approved address for a token ID or zero if no address. By default, the owner of the token is the one approved."
                },
                "isApprovedForAll": {
                    "content_1": "Tells whether an <pre class=\"code\"><code>operator</code></pre> is approved to transfer <pre class=\"code\"><code>owner</code></pre> tokens on their behalf."
                },
                "name": {
                    "content_1": "Gets the token <pre class=\"code\"><code>name</code></pre>."
                },
                "owner": {
                    "content_1": "Returns the address of the current contract owner, which is the only one authorized to call most of the methods. In this case, the Smart NFTs address is the owner unless ownership is renounced or transferred."
                },
                "ownerOf": {
                    "content_1": "Returns the owner of the token specified by the <pre class=\"code\"><code>tokenId</code></pre>"
                },
                "paused": {
                    "content_1": "Returns <pre class=\"code\"><code>true</code></pre> if the contract is paused and <pre class=\"code\"><code>false</code></pre> otherwise."
                },
                "supportsInterface": {
                    "content_1": "Returns <pre class=\"code\"><code>true</code></pre> if this contract implements the specified interface given the <pre class=\"code\"><code>interfaceId</code></pre> or false otherwise. Contracts can implement interfaces to inherit behavior from top-level contracts.",
                    "content_2": "For example, all the Smart NFTs contracts implement the <pre class=\"code\"><code>IERC721</code></pre> interface, with the following interface ID: <pre class=\"code\"><code>0x80ac58cd</code></pre>."
                },
                "symbol": {
                    "content_1": "Gets the token <pre class=\"code\"><code>symbol</code></pre>."
                },
                "tokenByIndex": {
                    "content_1": "It recovers the token ID at a given <pre class=\"code\"><code>index</code></pre> in the list of all tokens in the contract."
                },
                "tokenOfOwnerByIndex": {
                    "content_1": "It recovers the token ID at a given <pre class=\"code\"><code>index</code></pre> of the list of tokens owned by the <pre class=\"code\"><code>owner</code></pre>."
                },
                "tokenURI": {
                    "content_1": "It returns the URI given a <pre class=\"code\"><code>tokenId</code></pre>; it may be empty if no URI is stored."
                },
                "totalSupply": {
                    "content_1": "Gets the total amount of tokens stored in the contract."
                },
                "approve": {
                    "content_1": "Approves another address to transfer the given <pre class=\"code\"><code>tokenId</code></pre>. The <pre class=\"code\"><code>null</code></pre> address indicates no approved address for transfer. There can only be one approved address at a time. Only the owner or the approved operator for the given token can call this method."
                },
                "burn": {
                    "content_1": "Burns (deletes) a specific token given the <pre class=\"code\"><code>tokenId</code></pre>; this action cannot be reverted."
                },
                "pause": {
                    "content_1": "Stops the contract temporarily, preventing minting and transfers."
                },
                "renounceOwnership": {
                    "content_1": "Leaves the contract without an owner, losing all functionality that needs an owner."
                },
                "safeTransferFrom": {
                    "content_1": "Transfers a token given the <pre class=\"code\"><code>tokenId</code></pre> from one address (<pre class=\"code\"><code>from</code></pre>) to another address (<pre class=\"code\"><code>to</code></pre>)."
                },
                "setApprovalForAll": {
                    "content_1": "It changes the approval state for a given <pre class=\"code\"><code>operator</code></pre>. An operator is allowed to transfer tokens of the sender on their behalf."
                },
                "transferFrom": {
                    "content_1": "Transfers a token given the <pre class=\"code\"><code>tokenId</code></pre> from one address (<pre class=\"code\"><code>from</code></pre>) to another address (<pre class=\"code\"><code>to</code></pre>). The use of this method is discouraged, in favor of the <pre class=\"code\"><code>safeTransferFrom</code></pre> method."
                },
                "transferOwnership": {
                    "content_1": "Transfers ownership of the contract to a new address (<pre class=\"code\"><code>newOwner</code></pre>)."
                },
                "unpause": {
                    "content_1": "Resumes minting and transfers after pausing the contract."
                }
            }
        },
        "loading": {
            "contract": "Loading contract...",
            "method": "",
            "methods": "Loading methods...",
            "initial": "Input your contract ID to load it's methods.",
            "initialMethods": "Contract methods will appear here once loaded."
        },
        "success": {
            "transactionDisplay": "Success - Transaction Hash: {0}"
        },
        "error": {
            "invalidContract": "Invalid contract ID",
            "contractNotDeployed": "Contract has not been deployed yet",
            "missingParameter": "Missing parameter {0} ({1})",
            "missingImage": "Missing token image",
            "transactionDisplay": "Blockchain Error - Transaction Hash: {0}",
            "transactionMoreInfo": "For more information click on the following transaction hash."
        },
        "buttons": {
            "execute": {
                "text": "Execute",
                "aria": "Execute the {0} method"
            },
            "edit": "Edit contract",
            "view": "View collection"
        },
        "meta": {
            "title": "Contract Interaction",
            "description": "Interact with your contract! Create tokens, get contract information, and operate with the smart contract; no wallet or gas required!"
        }
    },
    "inputs": {
        "placeholder": {
            "address": "0xb794f5ea0ba39494ce839613fffba74279579268",
            "uint256": "Number - 1234567890",
            "bytes4": "0x11AAFF44",
            "bytes": "0x11FFA4...",
            "bool": "true or false",
            "string": "Text - The quick brown fox...",
            "boost_number": "Number - 1234567890",
            "boost_percentage": "Percentage - 0 ... 100",
            "number": "Number - 1234567890",
            "image": "Drop the image here or <span class=\"underline\">click here</span> to select it (2.5MB limit)...",
            "long_string": "Long text - Write your long text here",
            "contractId": "Contract ID...",
            "contractName": "SmartNFTs...",
            "contractSymbol": "SNFT..."
        },
        "text": {
            "boost_number": "Boost Number",
            "boost_percentage": "Boost Percentage",
            "number": "Plain Number",
            "string": "Text",
            "long_string": "Long Text",
            "image": "File: {0}",
            "contractId": "Contract ID",
            "contractName": "Contract Name",
            "contractSymbol": "Contract Symbol",
            "name": "Name (text)",
            "description": "Description (long text)",
            "extensions": {
                "mintable": "Mintable",
                "pausable": "Pausable",
                "burnable": "Burnable",
                "enumerable": "Enumerable",
                "uriStorage": "URI Storage",
                "uniqueStorage": "Unique Storage",
                "limitSupply": {
                    "name": "Limit Supply",
                    "count": "Supply Number"
                },
                "autoincrementId": "Auto Increment IDs",
                "metadata": {
                    "image": "Has Image?"
                }
            },
            "metadata": {
                "name": "Field Name",
                "type": "Field Type",
                "display": "Display Type"
            }
        },
        "errors": {
            "address": "Invalid address",
            "required": "Parameter is required",
            "bytes": "Invalid bytes",
            "bytes4": "Invalid bytes4",
            "uint256": "Invalid uint256 number",
            "bool": "Invalid boolean (true | false)",
            "name": "Name can only contain alphanumeric characters and underscore (_)",
            "symbol": "Symbol can only contain alphanumeric characters and underscore (_)",
            "metadataName": "This field can only contain letters, numbers, and _",
            "max20": "This field can have a maximum of 20 characters",
            "number": "Not a valid number",
            "boost_percentage": "Invalid percentage, must be between 0 and 100 (without %)",
            "string": "Invalid text, maximum length is 256 characters.",
            "long_string": "Invalid text, maximum length is 700 characters.",
            "email": "Invalid email.",
            "image": {
                "tooBig": "File too large, limit is 5MB",
                "countLimit": "Cannot upload more than 1 file",
                "type": "Invalid file type, only images are supported"
            }
        }
    },
    "status": {
        "title": "Backend Service",
        "status": {
            "ok": "Available",
            "notOk": "Unavailable",
            "timestamp": "Verification Time",
            "wallet": {
                "title": "Wallet",
                "address": {
                    "title": "Address",
                    "copy": "Copy wallet address",
                    "copyOk": "Copied wallet address to clipboard!"
                },
                "balance": {
                    "title": "Balance",
                    "lowBalance": "The wallet is running out of Ethereum"
                },
                "network": {
                    "using": "Network"
                }
            }
        },
        "contribute": {
            "title": "Want to contribute?",
            "addBalance": "Does it show a low balance, or do you want to add Ethereum to the Smart NFTs wallet? Go to the <a class=\"underline hover:text-brand_secondary duration-300 text-h5\" href=\"https://faucet.rinkeby.io/\" target=\"_blank\" rel=\"noopener noreferer\">Faucet</a> and follow the instructions to request Ethereum for the Smart NFTs account.",
            "disclaimer": "Do not transfer real Ethereum into the displayed wallet address; it can result in irrecoverable losses. We are not responsible for any transactions you make."
        },
        "errors": {
            "copyAddress": "Couldn't copy wallet address to clipboard.",
            "noAddress": "No Address",
            "noBalance": "No Balance",
            "noNetwork": "No Network"
        },
        "prepare": "Checking backend status, please wait...",
        "meta": {
            "title": "Status",
            "description": "View the status of our services, wallet address, and account balance."
        }
    },
    "pagination": {
        "results": "Showing {0} to {1} of {2} results",
        "aria": {
            "prev": "Go to previous page",
            "next": "Go to next page",
            "first": "Go to first page",
            "last": "Go to last page"
        }
    },
    "modal": {
        "aria": "Close the modal"
    },
    "notifications": {
        "aria": "Close this notification"
    },
    "404": {
        "hero": {
            "title": "404 - Not Found",
            "subtitle": "We couldn't find the page you were looking for, please go back home and start over.",
            "button": {
                "text": "Go back to home",
                "aria": "Go back to the homepage"
            }
        },
        "meta": {
            "title": "404",
            "description": "The page you are looking for doesn't exist."
        }
    },
    "500": {
        "hero": {
            "title": "500 - Internal Error",
            "subtitle": "There was an internal error, check the backend status in case our services are down, otherwise please go back home and start over",
            "buttonHome": {
                "text": "Go back home",
                "aria": "Go back to the homepage"
            },
            "buttonStatus": {
                "text": "See status",
                "aria": "See backend status"
            }
        },
        "meta": {
            "title": "500",
            "description": "Internal server error."
        }
    },
    "date": "{0}",
    "errors": {
        "robot": "You are not human, cannot use this!",
        "timeout": "Backend request timed out.",
        "internal": "Internal error, please try again later.",
        "contract": {
            "notExist": "Contract doesn't exist!",
            "notMint": "Contract cannot mint tokens!",
            "notDeployed": "Contract has not been deployed yet!",
            "notCopyId": "Cannot copy contract ID to clipboard!",
            "notCopyAddress": "Cannot copy contract address to clipboard!",
            "notCopyCode": "Cannot copy contract code to clipboard!"
        },
        "method": {
            "notCopyResponse": "Cannot copy response to clipboard!",
            "notCopyAddress": "Cannot copy address to clipboard!"
        }
    },
    "success": {
        "copy": "Copied to clipboard!"
    }
}