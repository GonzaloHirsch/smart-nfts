import { IHttpErrorData } from "../interfaces/error.interface";

export const HTTP_ERRORS = {
    BAD_REQUEST: {
        GENERAL: { status: 400, internalStatus: 'BAD_REQUEST', message: 'Bad request.' },
        PARAMS: { status: 400, internalStatus: 'INVALID_PARAMS', message: 'Invalid parameters.' },
        CONTRACT: { status: 400, internalStatus: 'INVALID_CONTRACT', message: 'Invalid contract. Data missing.' },
        MISSING_DEPLOY: { status: 400, internalStatus: 'MISSING_DEPLOY', message: 'Contract must be deployed.' },
        MISSING_COMPILATION: { status: 400, internalStatus: 'MISSING_COMPILATION', message: 'Contract must be compiled before deploying.' },
        ALREADY_DEPLOYED: { status: 400, internalStatus: 'ALREADY_DEPLOYED', message: 'Contract has already been deployed.' },
        ALREADY_COMPILED: { status: 400, internalStatus: 'ALREADY_COMPILED', message: 'Contract has already been compiled.' },
        INVALID_INTERACTION: { status: 400, internalStatus: 'INVALID_INTERACTION', message: 'Blockchain error when interacting.' },
        INVALID_INPUT_COUNT: { status: 400, internalStatus: 'INVALID_INPUT_COUNT', message: 'Input amount does not match param amount.' },
        INVALID_INPUT_MISSING: { status: 400, internalStatus: 'INVALID_INPUT_MISSING', message: 'Inputs are missing.' },
        INVALID_INPUT_TYPE: { status: 400, internalStatus: 'INVALID_INPUT_TYPE', message: 'Input types are incorrect.' },
        INVALID_INPUT_EXTENSIONS: { status: 400, internalStatus: 'INVALID_INPUT_EXT', message: 'Extensions combination is incorrect.' }, 
        FORBIDDEN_REQUEST: { status: 403, internalStatus: 'FORBIDDEN', message: 'Forbidden request.' }, 
    },
    FORBIDDEN: {
        GENERAL: { status: 403, internalStatus: 'FORBIDDEN', message: 'Forbidden.' },
    },
    NOT_FOUND: {
        GENERAL: { status: 404, internalStatus: 'NOT_FOUND', message: 'Not found.' },
        CONTRACT: { status: 404, internalStatus: "CONTACT_NF", message: 'Contract not found.' },
        METHOD: { status: 404, internalStatus: "METHOD_NF", message: 'Method not found.' },
    },
    CONFLICT: {
        VERIFICATION: {status: 409, internalStatus: "VERIFICATION_CONFLICT", message: 'Contract already verified' },
    },
    SERVER: {
        GENERAL: { status: 500, internalStatus: 'UNKNOWN_ERROR', message: 'Unknown server error.' },
        CONFIGURATION: { status: 500, internalStatus: 'CONFIGURATION_ERROR', message: 'Missing or invalid configuration.' },
        DATABASE: { status: 500, internalStatus: 'DB_ERROR', message: 'Database error.' },
        BLOCKCHAIN: { status: 500, internalStatus: 'BLOCKCHAIN_ERROR', message: 'Blockchain error.' },
        COMPILATION: { status: 500, internalStatus: 'COMPILATION_ERROR', message: 'Compilation error.' },
        EXTENSION: { status: 500, internalStatus: 'EXTENSION_ERROR', message: 'Extension error.' },
        ETHERSCAN: { status: 500, internalStatus: 'ETHERSCAN_ERROR', message: 'Etherscan error.' },
    },
};

export const EXCEPTION_NAMES = {
    CONTRACT_NOT_FOUND: 'ContractNotFoundException',
    METHOD_NOT_FOUND: 'MethodNotFoundException',
    VERIFICATION_FAILED: 'VerificationFailedException',
    RECAPTCHA_VERIFICATION_FAILED: 'RecaptchaVerificationFailedException',
    INSUFFICIENT_GAS: 'InsufficientGasException',
    COMPILATION_ERROR: 'CompilationException',
    VERIFICATION_DUPLICATION: 'VerificationDuplicationException',
    CONTRACT_NOT_DEPLOYED: 'ContractNotDeployedException',
    CONTRACT_NOT_COMPILED: 'ContractNotCompiledException',
    CONTRACT_ALREADY_DEPLOYED: 'ContractAlreadyDeployedException',
    INVALID_CONTRACT_OPTIONS: 'InvalidContractOptionsException',
    MISSING_EXTENSION: 'MissingExtensionException',
    NO_NETWORK: 'NoNetworkException',
    BLOCKCHAIN_INTERACT: 'BlockchainException',
    INVALID_INPUT_COUNT: 'InvalidInputCountException',
    INVALID_INPUT_MISSING: 'InvalidInputMissingException',
    INVALID_INPUT_TYPE: 'InvalidInputTypeException',
    INVALID_INPUT_EXTENSIONS: 'InvalidInputExtensionsException',
    ETHERSCAN_ERROR: 'EtherscanErrorException',
    MISSING_HEADER: "MissingHeaderException"
}

export const EXCEPTION_TO_HTTP_MAP = new Map<string, IHttpErrorData>([
    [EXCEPTION_NAMES.CONTRACT_NOT_DEPLOYED, HTTP_ERRORS.BAD_REQUEST.MISSING_DEPLOY],
    [EXCEPTION_NAMES.CONTRACT_NOT_COMPILED, HTTP_ERRORS.BAD_REQUEST.MISSING_COMPILATION],
    [EXCEPTION_NAMES.CONTRACT_ALREADY_DEPLOYED, HTTP_ERRORS.BAD_REQUEST.ALREADY_DEPLOYED],
    [EXCEPTION_NAMES.CONTRACT_NOT_FOUND, HTTP_ERRORS.NOT_FOUND.CONTRACT],
    [EXCEPTION_NAMES.METHOD_NOT_FOUND, HTTP_ERRORS.NOT_FOUND.METHOD],
    [EXCEPTION_NAMES.VERIFICATION_DUPLICATION, HTTP_ERRORS.CONFLICT.VERIFICATION],
    [EXCEPTION_NAMES.VERIFICATION_FAILED, HTTP_ERRORS.SERVER.BLOCKCHAIN],
    [EXCEPTION_NAMES.INSUFFICIENT_GAS, HTTP_ERRORS.SERVER.BLOCKCHAIN],
    [EXCEPTION_NAMES.INVALID_CONTRACT_OPTIONS, HTTP_ERRORS.BAD_REQUEST.PARAMS],
    [EXCEPTION_NAMES.COMPILATION_ERROR, HTTP_ERRORS.SERVER.COMPILATION],
    [EXCEPTION_NAMES.MISSING_EXTENSION, HTTP_ERRORS.SERVER.EXTENSION],
    [EXCEPTION_NAMES.NO_NETWORK, HTTP_ERRORS.SERVER.CONFIGURATION],
    [EXCEPTION_NAMES.BLOCKCHAIN_INTERACT, HTTP_ERRORS.BAD_REQUEST.INVALID_INTERACTION],
    [EXCEPTION_NAMES.INVALID_INPUT_COUNT, HTTP_ERRORS.BAD_REQUEST.INVALID_INPUT_COUNT],
    [EXCEPTION_NAMES.INVALID_INPUT_MISSING, HTTP_ERRORS.BAD_REQUEST.INVALID_INPUT_MISSING],
    [EXCEPTION_NAMES.INVALID_INPUT_TYPE, HTTP_ERRORS.BAD_REQUEST.INVALID_INPUT_TYPE],
    [EXCEPTION_NAMES.INVALID_INPUT_EXTENSIONS, HTTP_ERRORS.BAD_REQUEST.INVALID_INPUT_EXTENSIONS],
    [EXCEPTION_NAMES.ETHERSCAN_ERROR, HTTP_ERRORS.SERVER.ETHERSCAN],
    [EXCEPTION_NAMES.MISSING_HEADER, HTTP_ERRORS.BAD_REQUEST.FORBIDDEN_REQUEST],
    [EXCEPTION_NAMES.RECAPTCHA_VERIFICATION_FAILED, HTTP_ERRORS.BAD_REQUEST.FORBIDDEN_REQUEST],
]);